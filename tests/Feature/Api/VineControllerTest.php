<?php

namespace Tests\Feature\Api;

use App\Http\Routes\Api\ApiRoutesProvider;
use App\Models\User;
use App\Models\Vine;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Testing\Fluent\AssertableJson;
use Tests\Generators\UserGenerator;
use Tests\Generators\VineGenerator;
use Tests\TestCase;

/**
 *
 * @group api-vine
 */
class VineControllerTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    /**
     * @var User
     */
    private $user;
    private array $data;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->data = [
            'name' => $this->faker->sentence(),
            'code' => $this->faker->lexify('?????'),
            'description' => $this->faker->paragraph(7),
        ];
        $this->user = UserGenerator::getManager();
//        $this->actingAs($this->user, 'api');
    }

    /**
     * @group api-vine1
     */
    public function testIndex()
    {
        $this->actingAs($this->user, 'api');
        $cnt = 3;
        VineGenerator::create($cnt);
        $response = $this->getJson(ApiRoutesProvider::vineIndex());
        $response->assertOk()
            ->assertJson(fn(AssertableJson $json) => $json->has('data.count')
                ->where('data.count', $cnt)
                ->has('data.items', $cnt, fn(AssertableJson $json) => $json
                    ->whereAllType([
                        'id' => 'integer',
                        'name' => 'string',
                        'code' => 'string',
                        'description' => 'string|null',
                    ]))
//                ->etc()
            );
    }

    /**
     * @group api-vine2
     */
    public function testFilledValues()
    {
        $this->actingAs($this->user, 'api');
        $cnt = 3;
        $vines = VineGenerator::create($cnt);
        $first = $vines->first();
        $response = $this->getJson(ApiRoutesProvider::vineIndex());
        $response->assertJson(fn(AssertableJson $json) => $json
            ->has('data.items', $cnt, fn(AssertableJson $json) => $json
                ->where('id', $first->id)
                ->where('name', $first->name)
                ->where('code', $first->code)
                ->where('description', $first->description)
//                ->etc()
            ));
        $this->assertDatabaseHas('vines', [
            'id' => $first->id,
            'name' => $first->name,
            'code' => $first->code,
            'description' => $first->description,
        ]);
    }

    /**
     * @group api-vine3
     */
    public function testCreateVine()
    {
        $this->actingAs($this->user, 'api');
        $response = $this->postJson(ApiRoutesProvider::vineStore(), $this->data);
        $response
            ->assertCreated()
            ->assertJsonStructure([
                'data' => [
                    'id',
                    'name',
                    'code',
                    'description',
                ]
            ])
            ->assertJsonFragment([
                'name' => $this->data['name'],
                'code' => $this->data['code'],
                'description' => $this->data['description'],
            ]);
    }

    /**
     * @group api-vine4
     */
    public function testCreateVineUnauthorized()
    {
        $this->actingAs($this->user, 'web');
        $response = $this->postJson(ApiRoutesProvider::vineStore(), $this->data);
        $response->assertUnauthorized();
        $this->assertDatabaseCount('vines', 0);
    }

    /**
     * @group api-vine5
     */
    public function testCreateVineForbidden()
    {
        $this->actingAs(UserGenerator::getUser(), 'api');
        $response = $this->postJson(ApiRoutesProvider::vineStore(), $this->data);
        $response->assertForbidden();
        $this->assertDatabaseCount('vines', 0);
    }

    /**
     * @group api-vine6
     */
    public function testCreateVineNoDouble()
    {
        $this->actingAs($this->user, 'api');
        $this->postJson(ApiRoutesProvider::vineStore(), $this->data);
        $this->assertDatabaseCount('vines', 1);
        $response = $this->postJson(ApiRoutesProvider::vineStore(), $this->data);
        $response->assertSeeText('Integrity constraint violation');
        $this->assertDatabaseCount('vines', 1);
    }

    /**
     * @group api-vine7
     */
    public function testCreateVineDataError()
    {
        unset($this->data['name']);
        $this->data['code'] = 'a';
        $this->actingAs($this->user, 'api');
        $response = $this->postJson(ApiRoutesProvider::vineStore(), $this->data);
        $response->assertOk()
            ->assertInvalid([
                'name' => 'The name field is required.',
                'code' => 'The code must be at least 3 characters.',
            ]);
        $this->assertDatabaseCount('vines', 0);
    }

    /**
     * @group api-vine8
     */
    public function testUpdateVine()
    {
        $this->actingAs($this->user, 'api');
        $vine = VineGenerator::create()->first();
        $this->assertDatabaseHas('vines', [
            'id' => $vine->id,
            'name' => $vine->name,
            'code' => $vine->code,
            'description' => $vine->description,
        ]);
        $response = $this->putJson(ApiRoutesProvider::vineUpdate($vine), $this->data);
        $response
            ->assertOk()
            ->assertJsonStructure([
                'data' => [
                    'id',
                    'name',
                    'code',
                    'description',
                ]
            ])
            ->assertJsonFragment([
                'name' => $this->data['name'],
                'code' => $this->data['code'],
                'description' => $this->data['description'],
            ]);
        $this->assertDatabaseHas('vines', [
            'id' => $vine->id,
            'name' => $this->data['name'],
            'code' => $this->data['code'],
            'description' => $this->data['description'],
        ]);
        $updatedVine = Vine::find($vine->id);
        $this->assertEquals($updatedVine->name, $this->data['name']);
        $this->assertEquals($updatedVine->code, $this->data['code']);
        $this->assertEquals($updatedVine->description, $this->data['description']);
    }

    /**
     * @group api-vine9
     */
    public function testDeleteVine()
    {
        $this->actingAs($this->user, 'api');
        $vine = VineGenerator::create()->first();
        $this->assertDatabaseHas('vines', [
            'id' => $vine->id,
            'name' => $vine->name,
            'code' => $vine->code,
            'description' => $vine->description,
        ]);
        $response = $this->deleteJson(ApiRoutesProvider::vineDestroy($vine));
        $response
            ->assertOk()
            ->assertExactJson(['status' => 'ok']);
        $this->assertDeleted($vine);
    }

    /**
     * @group api-vine10
     */
    public function testShowVine()
    {
        $this->actingAs($this->user, 'api');
        $vine = VineGenerator::create()->first();
        $this->assertDatabaseHas('vines', [
            'id' => $vine->id,
            'name' => $vine->name,
            'code' => $vine->code,
            'description' => $vine->description,
        ]);
        $response = $this->getJson(ApiRoutesProvider::vineShow($vine));
        $response
            ->assertOk()
            ->assertExactJson([
                'data' => [
                    'id' => $vine->id,
                    'name' => $vine->name,
                    'code' => $vine->code,
                    'description' => $vine->description,
                ]
            ]);
    }


}
