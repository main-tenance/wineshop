<?php

namespace Tests\Feature\Api;

use App\Http\Routes\Api\ApiRoutesProvider;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Testing\Fluent\AssertableJson;
use Tests\Generators\UserGenerator;
use Tests\TestCase;

/**
 *
 * @group api-user
 */
class UserControllerTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    /**
     * @var User
     */
    private $user;
    private array $data;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = UserGenerator::getUser();
        $this->actingAs($this->user, 'api');
        $password = $this->faker->password(8);
        $this->data = [
            'name' => $this->faker->name(),
            'login' => $this->faker->lexify('?????'),
            'email' => $this->faker->email(),
            'phone' => $this->faker->phoneNumber(),
            'password' => $password,
            'password_confirmation' => $password,
        ];
    }

    /**
     * @group api-user1
     */
    public function testShow()
    {
        $user = UserGenerator::getVip();
        $response = $this->getJson(ApiRoutesProvider::userShow($user));
        $response
            ->assertOk()
            ->assertExactJson([
                'data' => [
                    'id' => $user->id,
                    'name' => $user->name,
                    'last_name' => $user->last_name,
                    'login' => $user->login,
                    'email' => $user->email,
                    'phone' => $user->phone,
                    'vip' => $user->isVip(),
                ]
            ]);
    }

    /**
     * @group api-user2
     */
    public function testCreate()
    {
        $response = $this->postJson(ApiRoutesProvider::userStore(), $this->data);
        $response
            ->assertCreated()
            ->assertJson(fn(AssertableJson $json) => $json
                ->where('data.name', $this->data['name'])
                ->where('data.login', $this->data['login'])
                ->where('data.email', $this->data['email'])
                ->where('data.phone', $this->data['phone'])
                ->where('data.vip', false)
                ->missing('data.password')
                ->missing('data.password_confirmation')
                ->missing('data.api_token')
                ->etc()
            );
    }

    /**
     * @group api-user3
     */
    public function testCreateWithDataError()
    {
        unset($this->data['name']);
        $this->data['password'] = 'a';
        $response = $this->postJson(ApiRoutesProvider::userStore(), $this->data);
        $response->assertOk()
            ->assertInvalid(
                [
                    'name' => 'The name field is required.',
                    'password' => 'The password confirmation does not match.'
                ],
                [
                    'password' => 'The password must be at least 8 characters.'
                ],
            );
        $this->assertDatabaseMissing('users', [
            'login' => $this->data['login'],
        ]);
    }

    /**
     * @group api-user4
     */
    public function testUpdate()
    {
        $user = UserGenerator::getUser();
        $response = $this->putJson(ApiRoutesProvider::userUpdate($user), $this->data);
        $response
            ->assertOk()
            ->assertJsonStructure([
                'data' => [
                    'id',
                    'name',
                    'last_name',
                    'login',
                    'email',
                    'phone',
                    'vip',
                ]
            ])
            ->assertJsonFragment([
                'name' => $this->data['name'],
                'login' => $this->data['login'],
                'email' => $this->data['email'],
                'phone' => $this->data['phone'],
            ]);
        $this->assertDatabaseHas('users', [
            'id' => $user->id,
            'name' => $this->data['name'],
            'login' => $this->data['login'],
            'email' => $this->data['email'],
            'phone' => $this->data['phone'],
        ]);
    }

    /**
     * @group api-user5
     */
    public function testDelete()
    {
        $user = UserGenerator::getUser();
        $this->assertDatabaseHas('users', [
            'id' => $user->id,
            'name' => $user->name,
            'login' => $user->login,
            'email' => $user->email,
            'phone' => $user->phone,
        ]);
        $response = $this->deleteJson(ApiRoutesProvider::userDestroy($user));
        $response
            ->assertOk()
            ->assertExactJson(['status' => 'ok']);
        $this->assertDeleted($user);
    }

    /**
     * @group api-user6
     */
    public function testInfo()
    {
        $response = $this->getJson(ApiRoutesProvider::userInfo());
        $response
            ->assertOk()
            ->assertJsonStructure([
                'id',
                'name',
                'login',
                'email',
                'phone',
                'last_name',
                'api_token',
                'email_verified_at',
                'created_at',
                'updated_at',
            ])
            ->assertJsonFragment([
                'name' => $this->user['name'],
                'login' => $this->user['login'],
                'email' => $this->user['email'],
                'phone' => $this->user['phone'],
            ]);
    }
}
